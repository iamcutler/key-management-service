{
	"info": {
		"_postman_id": "56fd0248-41ff-4cde-bb73-35e254d95f79",
		"name": "Key Management Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health",
			"description": "",
			"item": [
				{
					"name": "GET: Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e781fc3-d35e-4830-a3de-b7034fc34204",
								"type": "text/javascript",
								"exec": [
									"pm.test('should return a status code of 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('should return OK in the body', () => {",
									"    pm.expect(pm.response.text()).to.include(\"OK\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Authorization",
								"value": "eyJhbGciOiJSUzUxMiJ9.eyJzdWIiOiIzIiwiY2xpZW50VHlwZSI6IldFQiIsImxpY2Vuc2VzIjpbIkRFVkVMT1BNRU5UIl0sImFuYWx5dGljc0xpY2Vuc2VzUHVyY2hhc2VkIjp7IkFuYWx5dGljc0NsaWVudCI6ZmFsc2UsIkFuYWx5dGljc0FQSSI6ZmFsc2V9LCJpYXQiOjE1NjQ2MDQ0NzYsImV4cCI6MTU2NDYwNTY3NiwiaXNzIjoiQXV0b21hdGlvbkFueXdoZXJlIiwibmFub1RpbWUiOjkxNjY1OTkwNDY3MDV9.kkoeSeUwKGzzKWU4Hn7v6fvy3YyunUE4Sdz9uaaNgt61F2Vi8jEo-fbEh9pvhDfuRpeuwL9ELE5CC4qGfDHEjrSxve0RlRYRhkIvbquNGog-K2bMI7pPcln7zL4vsYRN1QMDuf8CuFX194ngp7QaTy2UJgGjvBS5HhJQnSHoh9dbghkOc-MwU7co1MuqyyzHOcXXNBYo2QeeQbxJBHUjvX7ByoQAcWSzchxZNtY27mV2-0GoatxDlTesOAhu-y0kIWbR2akm8MGl6NDFAx31UkV97T3diZtlMtdlpxgtEhI_ztcBSq_6_xoBXeJBPbTKHdCE2eMDejZgP3pHyFGSdA",
								"disabled": true
							}
						],
						"body": {},
						"url": {
							"raw": "http://localhost:3000/health",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"health"
							]
						},
						"description": "Health check for key service"
					},
					"response": []
				}
			]
		},
		{
			"name": "Create a customer key",
			"description": "",
			"item": [
				{
					"name": "AWS",
					"description": "",
					"item": [
						{
							"name": "Create new KMS CMK key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d06edd58-ba95-4650-8054-6ae0c95e0f2b",
										"type": "text/javascript",
										"exec": [
											"const responseData = pm.response.json();",
											"",
											"pm.test('request should be valid and have a body', () => {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('should return the expected data payload', () => {",
											"    // validate key and alias is returned",
											"    pm.expect(responseData['data']['keyId']).to.be.a('string');",
											"    pm.expect(responseData['data']['alias']).to.be.a('string');",
											"",
											"    pm.response.to.have.jsonBody('success', true);",
											"    pm.response.to.have.jsonBody('statusCode', 200);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "provider",
										"value": "AWS"
									}
								],
								"body": {},
								"url": {
									"raw": "http://localhost:3000/keys",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"keys"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "when key provider is not throw exception",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86129413-5a68-4a49-960e-523f4e6f9717",
								"type": "text/javascript",
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.test('request should be valid and have a body', () => {",
									"    pm.response.to.have.status(400); // BAD REQUEST",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('should return the expected data payload', () => {",
									"    pm.expect(responseData['data']).to.eq(null);",
									"    pm.response.to.have.jsonBody('success', false);",
									"    pm.response.to.have.jsonBody('statusCode', 400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "provider",
								"value": "AWS",
								"disabled": true
							}
						],
						"body": {},
						"url": {
							"raw": "http://localhost:3000/keys",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"keys"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d09ad964-71e1-4d7e-87cd-2c2439d4fa7c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e1b79d59-0fd8-460b-9183-d4f3a30d48ce",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}